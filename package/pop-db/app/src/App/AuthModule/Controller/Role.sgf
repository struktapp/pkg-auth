<?php

namespace {{app}}\AuthModule\Controller;

class Role extends \Strukt\Framework\Contract\Controller{

	public function pager(array $filter = [], int $start_from = 1, int $page_size = 10){

		$hasFilter = array_key_exists("name", $filter);

		$sql = select("r.id, r.name")->from("role r");
		$sql = $hasFilter?$sql->where("r.name LIKE :name"):$sql;
		$sql = $sql->orderBy("id", order:"ASC")->page($start_from, $page_size);

		$pdo = pdo();
		if($hasFilter)
			$rs = $pdo->execQuery((string)$sql, ["name"=>$filter["name"]]);

		if(negate($hasFilter))
			$rs = $pdo->execQuery((string)$sql);

		return $rs;
	}

	public function findAll(){

		$sql = select("r.id, r.name")
				->from("role r")
				->orderBy("r.name", order:"ASC");

		return pdo()->execQuery((string)$sql);
	}

	public function findByName(string $name){

		$role = db("role")->findOne(["name"=>$name]);

	   	return $role;
	}

	public function find(int $id){

		$role = db("role", $id);

		return $role;
	}

	public function add(array $role_data){

		extract($role_data);

		$role = $this->get("role");

		try{

			$role->name = $name;
			$role->descr = $descr;
			$role->save();

			return $role;
		}
		catch(\Exception $e){

			cmd("service.logger")->error($e);

			return null;
		}
	}

	public function update(int $id, array $role_data){

		extract($role_data);

		$role = $this->find($id);

		try{

			$role->name = $name;
			$role->descr = $descr;
			$role->save();

			return true;
		}
		catch(\Exception $e){

			cmd("service.logger")->error($e);

			return false;
		}
	}

	public function addPermission(int $role_id, int $perm_id){

		$role = $this->find($role_id);

		$perm = $this->get("au.ctr.Permission")->find($perm_id);

		try{

			$rolePerm = $this->get("role_permission");
			$rolePerm->permmission_id = $perm->id;
			$rolePerm->role_id = $role->id;
			$rolePerm->save();
		}
		catch(\Exception $e){

			cmd("service.logger")->error($e);
		}
		finally{

			$id = $rolePerm->id;
			if(!empty($id))
				return $rolePerm;
			
			return null;
		}
	}

	public function findPermissionsByRole(string $name){

		$sql = select("p.id, p.name")
				->from("role_permission rp")
				->leftjoin("permission p ON rp.permission_id = p.id")
				->leftjoin("role r ON rp.role_id = r.id")
				->where("r.name = :name")
				->orderBy("p.id", order:"DESC");

		return pdo()->execQuery((string)$sql, ["name"=>$name]);
	}

	public function findPermissionsListByRole(string $name){

		$result = $this->findPermissionsByRole($name);

		$rows = [];
		foreach($result as $row)
			$rows[] = $row["name"];

		return $rows;
	}

	public function findRolePermission(int $role_id, int $perm_id){

		$perm = db("role_permission")->findOne(["role_id"=>$role_id, "permission_id"=>$perm_id]);

		return $perm;
	}

	public function removeRolePermission(\{{app}}\RolePermission $rolePerm){

		raise("ctr[Role::removeRolePermission] unimplemented!");
	}

	public function addRolePermission(\{{app}}\Role $role, \{{app}}\Permission $perm){

		$rolePerm = db("role_permission");
		$rolePerm->role_id = $role->id;
		$rolePerm->permission_id = $perm->id;
		$rolePerm->save();

		return $rolePerm;
	}
}