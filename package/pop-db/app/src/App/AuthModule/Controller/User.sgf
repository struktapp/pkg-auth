<?php

namespace {{app}}\AuthModule\Controller;

class User extends \Strukt\Framework\Contract\Controller{

	public function pager(array $filter = [], int $start_from = 1, int $page_size = 10){

		$hasFilter = array_key_exists("username", $filter);	

		$sql = select("u.id, u.username, u.status")->from("user u");
		$sql = $hasFilter?$sql->where("u.username LIKE :username"):$sql;
		$sql = $sql->orderBy("id", order:"ASC")->page($start_from, $page_size);

		if($hasFilter)
			$rs = resultset($sql, ["username"=>$filter["username"]])->yield();

		if(negate($hasFilter))
			$rs = resultset($sql)->yield();

		return $rs;
	}

	public function find($id){

		$user = db("user", $id);

		return $user;
	}

	public function findPermissionsByUsername(string $username){

		$user = $this->findByUsername($username);

		$permissions = $this->get("au.ctr.Role")->findPermissionsListByRole($user->role->name);

		return $permissions;
	}

	public function doAuth(string $username, string $password){

		$user = $this->findByUsername($username);

		if(!is_null($user))
			if(bcry($password)->verify($user->password))
				return true;
			
		return false;
	}

	public function findByUsername(string $username){

		$user = db("user")->findOne(["username"=>$username]);

	   	return $user;
	}

	public function add(array $user_data){

		extract($user_data);

		$user = $this->get("User");
		$role = $this->get("au.ctr.Role")->find($role_id);

		try{

			$user->username = $username;
			$user->password = sha1($password);
			$user->role_id = $role->id;
			$user->status = "INACTIVE";
			$user->save();

			return $user;
		}
		catch(\Exception $e){

			cmd("service.logger")->info($e);

			return null;
		}
	}

	public function update(int $id, array $user_data){

		extract($user_data);

		$user = $this->find($id);
		$role = $this->get("au.ctr.Role")->find($role_id);

		try{

			$user->username = $username;
			$user->password = bcry($password)->encode();
			$user->role_id = $role->id;
			$user->save();

			return true;
		}
		catch(\Exception $e){

			cmd("service.logger")->error($e);

			return false;
		}
	}

	public function changePassword(string $username, string $password){

		try{

			$user = $this->findByUsername($username);

			if(is_null($user))
				raise("AuthModule\Controller\User::changePassword | username does not exist!");

			$user->password = sha1($password);
			$user->save();

			return true;
		}
		catch(\Exception $e){

			cmd("service.logger")->error($e);

			return false;
		}
	}

	public function changeStatus(string $username, string $status){

		try{

			$user = $this->findByUsername($username);

			if(is_null($user))
				raise("AuthModule\Controller\User::changePassword | username does not exist!");

			$user->status = $status;
			$user->save();

			return true;
		}
		catch(\Exception $e){

			cmd("service.logger")->error($e);

			return false;
		}
	}
}